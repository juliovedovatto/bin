#!/bin/bash

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
CURRENT_DIR=$(pwd)

print_help() {
  echo "Usage: $(basename "$0") [OPTIONS] <REPOSITORY_URL> [SSH_KEY_NAME]"
  echo "  OPTIONS:"
  echo "    -b BRANCH_NAME      Specify the branch name to clone"
  echo "    -H ALIAS            Specify host alias if present on ssh configuration"
  echo "    -t TARGET_PATH      Specify the target path for the clone operation"
  echo "    -s                  Skip prompting for user name and email"
  echo ""
  echo "  If SSH_KEY_NAME is not provided, the script will perform a regular clone using default SSH key from config."
  echo ""
}

print_info() {
  echo -e "\033[1;33m$1\033[0m"
}

print_error() {
  echo -e "\033[1;31m$1\033[0m"
}

validate_url() {
  PATTERN="^([^@]+)@([^:]+):(.+)$"

  if [[ ! $1 =~ $PATTERN ]]; then
    echo "URL ${1} is not valid. Exiting script."
    exit 1
  fi
}

# Check if both repository URL and ssh key name are provided
if [ $# -eq 0 ]; then
  print_help
  exit 1
fi

BRANCH_NAME=""
REPOSITORY_URL=""
SSH_KEY_NAME=""
TARGET_DIR=""
SKIP_USER_PROMPT=""
HOST_ALIAS=""

while [ "$#" -gt 0 ]; do
  case "$1" in
  -H)
    HOST_ALIAS=$2
    shift 2
    ;;
  -b)
    BRANCH_NAME=$2
    shift 2
    ;;
  -t)
    TARGET_DIR=$2
    shift 2
    ;;
  -s)
    SKIP_USER_PROMPT="true"
    shift
    ;;
  -h)
    print_help
    exit
    ;;
  *)
    if [ -z "$REPOSITORY_URL" ]; then
      REPOSITORY_URL=$1
    elif [ -z "$SSH_KEY_NAME" ]; then
      SSH_KEY_NAME=$1
    else
      print_error "Error: Unexpected argument '$1'."
      print_help
      exit 1
    fi
    shift
    ;;
  esac
done

if [ -z "$REPOSITORY_URL" ]; then
  print_error "Error: Repository URL is required."
  exit 1
fi

validate_url "$REPOSITORY_URL"

if [ -n "$HOST_ALIAS" ]; then
  HOST_ENTRY=$(grep "Host github.com-$HOST_ALIAS" ~/.ssh/config)
  if [ -z "$HOST_ENTRY" ]; then
    print_error "Error: Host alias '$HOST_ALIAS' is not present in SSH config. Please add it before using."
    exit 1
  fi

  # NOTE: KornShell expression does not work
  # REPOSITORY_URL="${REPOSITORY_URL//@([^:]*):/@\1-$HOST_ALIAS:}"
  # shellcheck disable=SC2001
  REPOSITORY_URL=$(echo "$REPOSITORY_URL" | sed "s/@\([^:]*\):/@\1-$HOST_ALIAS:/")
fi

if [ -n "$SSH_KEY_NAME" ]; then
  SSH_KEY_FILE="$HOME/.ssh/id_rsa_$SSH_KEY_NAME"

  if [ ! -f "$SSH_KEY_FILE" ]; then
    echo "Error: SSH key file '$SSH_KEY_FILE' not found."
    exit 1
  fi
fi

if [ -z "${TARGET_DIR}" ]; then
  read -r -p "Enter target directory (press Enter for default): " TARGET_DIR
  TARGET_DIR=${TARGET_DIR:-$(basename "$REPOSITORY_URL" .git)}
fi

if [[ ! "${TARGET_DIR}" =~ ^/ ]]; then
  TARGET_DIR="${CURRENT_DIR}/${TARGET_DIR}"
fi

echo ""

ARGS=""
if [ -n "${BRANCH_NAME}" ]; then
  ARGS="-b ${BRANCH_NAME}"
fi

print_info "Clonning repository..."

if [ -n "${SSH_KEY_FILE}" ]; then
  # shellcheck disable=SC2086
  SSH_AUTH_SOCK="" git -c core.sshCommand="ssh -T -i ${SSH_KEY_FILE} -o IdentitiesOnly=yes" clone ${ARGS} "${REPOSITORY_URL}" "${TARGET_DIR}"
  if [ $? -ne 0 ]; then
    echo "Error: Git clone failed."
    exit 1
  fi
else
  # shellcheck disable=SC2086
  git clone ${ARGS} "${REPOSITORY_URL}" "${TARGET_DIR}"
fi

if [ $? -ne 0 ]; then
  print_error "Error: Git clone failed."
  exit 1
fi

cd "${TARGET_DIR}" || { print_error "Error: Failed to change directory."; exit 1; }

if [ -n "${SSH_KEY_FILE}" ]; then
  print_info "Adding ${SSH_KEY_FILE} to git configuration"
  git config core.sshCommand "SSH_AUTH_SOCK=\"\" ssh -T -i ${SSH_KEY_FILE} -o IdentitiesOnly=yes"
fi

echo ""
echo ""

if [ -z "$SKIP_USER_PROMPT" ]; then

  print_info "Checking user configuration..."
  echo ""

  read -r -p "Enter your name (press Enter for default): " USER_NAME
  USER_NAME=${USER_NAME:-$(git config --global user.name)}

  read -r -p "Enter your email (press Enter for default): " USER_EMAIL
  USER_EMAIL=${USER_EMAIL:-$(git config --global user.email)}

  print_info "Adding user and email information to the config"
  echo ""

  git config user.name "${USER_NAME}"
  git config user.email "${USER_EMAIL}"

  GPG_KEY_ID=$(gpg --list-secret-keys --keyid-format LONG "${USER_EMAIL}" 2>/dev/null | grep sec | awk '{print $2}' | cut -d '/' -f 2)
  if [ -n "${GPG_KEY_ID}" ]; then
    read -r -p "Do you want to sign your commits with GPG key for ${USER_EMAIL}? (Y/n): " SIGN_COMMITS
    SIGN_COMMITS=$(echo "${SIGN_COMMITS:-"y"}" | tr '[:upper:]' '[:lower:]')

    if [ "${SIGN_COMMITS}" = "y" ]; then
      print_info "Setting GPG key for ${USER_EMAIL}"

      git config commit.gpgsign true
      git config user.signingkey "${GPG_KEY_ID}"
    fi
  fi

fi

echo ""
print_info "Git clone complete"
